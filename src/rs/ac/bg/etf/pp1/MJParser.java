
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jul 18 15:55:44 CEST 2025
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Fri Jul 18 15:55:44 CEST 2025
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\062\010\000\002\002\004\000\002\061" +
    "\003\000\002\003\002\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\005\002\000\002\005\004\000" +
    "\002\006\006\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\007\003\000\002\007\005\000\002\010" +
    "\005\000\002\015\005\000\002\016\005\000\002\016\003" +
    "\000\002\017\004\000\002\017\003\000\002\011\005\000" +
    "\002\012\005\000\002\012\003\000\002\014\004\000\002" +
    "\013\002\000\002\013\004\000\002\063\004\000\002\071" +
    "\003\000\002\071\003\000\002\026\003\000\002\026\003" +
    "\000\002\064\011\000\002\027\002\000\002\027\004\000" +
    "\002\030\002\000\002\030\004\000\002\031\004\000\002" +
    "\032\005\000\002\032\003\000\002\034\003\000\002\034" +
    "\003\000\002\033\005\000\002\067\003\000\002\035\003" +
    "\000\002\035\003\000\002\037\004\000\002\037\006\000" +
    "\002\040\006\000\002\040\006\000\002\036\003\000\002" +
    "\036\006\000\002\036\004\000\002\036\004\000\002\036" +
    "\005\000\002\036\007\000\002\036\010\000\002\036\007" +
    "\000\002\036\005\000\002\044\003\000\002\102\002\000" +
    "\002\102\003\000\002\041\002\000\002\041\004\000\002" +
    "\042\004\000\002\042\004\000\002\043\004\000\002\043" +
    "\004\000\002\057\005\000\002\057\005\000\002\060\005" +
    "\000\002\060\007\000\002\060\004\000\002\103\003\000" +
    "\002\105\003\000\002\105\005\000\002\104\003\000\002" +
    "\106\003\000\002\106\005\000\002\107\003\000\002\107" +
    "\005\000\002\045\004\000\002\045\005\000\002\100\004" +
    "\000\002\100\006\000\002\100\004\000\002\101\006\000" +
    "\002\101\004\000\002\101\004\000\002\046\002\000\002" +
    "\046\003\000\002\047\004\000\002\050\002\000\002\050" +
    "\005\000\002\077\003\000\002\077\005\000\002\076\003" +
    "\000\002\076\005\000\002\075\003\000\002\074\003\000" +
    "\002\074\005\000\002\073\003\000\002\073\004\000\002" +
    "\072\003\000\002\072\006\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\007\000\002\072\005" +
    "\000\002\065\003\000\002\065\006\000\002\066\003\000" +
    "\002\051\003\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\004\005\001\002\000\004\002\340\001" +
    "\002\000\004\063\007\001\002\000\010\012\ufffe\056\ufffe" +
    "\063\ufffe\001\002\000\010\012\uffff\056\uffff\063\uffff\001" +
    "\002\000\010\012\011\056\012\063\017\001\002\000\004" +
    "\063\017\001\002\000\010\016\ufffa\057\ufffa\063\ufffa\001" +
    "\002\000\010\012\ufffc\056\ufffc\063\ufffc\001\002\000\006" +
    "\003\020\063\021\001\002\000\010\012\ufffb\056\ufffb\063" +
    "\ufffb\001\002\000\010\012\ufffd\056\ufffd\063\ufffd\001\002" +
    "\000\010\003\uffd6\054\uffd6\063\uffd6\001\002\000\006\046" +
    "\uffed\050\uffed\001\002\000\010\046\uffe8\050\uffe8\054\030" +
    "\001\002\000\006\046\uffef\050\uffef\001\002\000\006\046" +
    "\025\050\024\001\002\000\006\003\020\063\021\001\002" +
    "\000\010\012\ufff1\056\ufff1\063\ufff1\001\002\000\006\046" +
    "\ufff0\050\ufff0\001\002\000\006\046\uffee\050\uffee\001\002" +
    "\000\004\055\031\001\002\000\010\046\uffe7\050\uffe7\053" +
    "\uffe7\001\002\000\010\016\040\057\035\063\017\001\002" +
    "\000\004\063\323\001\002\000\004\063\uffe5\001\002\000" +
    "\004\002\001\001\002\000\004\052\041\001\002\000\010" +
    "\016\ufff9\057\ufff9\063\ufff9\001\002\000\004\063\uffe4\001" +
    "\002\000\010\003\047\053\050\063\017\001\002\000\006" +
    "\050\320\053\321\001\002\000\004\063\316\001\002\000" +
    "\006\050\uffd9\053\uffd9\001\002\000\006\056\uffe0\063\uffe0" +
    "\001\002\000\006\050\uffda\053\uffda\001\002\000\006\050" +
    "\uffd8\053\uffd8\001\002\000\006\056\uffe3\063\uffe3\001\002" +
    "\000\006\056\uffe2\063\uffe2\001\002\000\006\056\053\063" +
    "\017\001\002\000\026\013\uffde\014\uffde\017\uffde\020\uffde" +
    "\022\uffde\024\uffde\025\uffde\056\uffde\057\uffde\063\uffde\001" +
    "\002\000\004\063\056\001\002\000\006\056\uffdf\063\uffdf" +
    "\001\002\000\010\046\uffe8\050\uffe8\054\030\001\002\000" +
    "\006\046\uffea\050\uffea\001\002\000\006\046\062\050\061" +
    "\001\002\000\004\063\056\001\002\000\006\056\uffec\063" +
    "\uffec\001\002\000\006\046\uffeb\050\uffeb\001\002\000\006" +
    "\046\uffe9\050\uffe9\001\002\000\026\013\105\014\067\017" +
    "\076\020\101\022\077\024\070\025\102\056\100\057\073" +
    "\063\071\001\002\000\012\033\221\034\222\045\224\052" +
    "\223\001\002\000\004\052\300\001\002\000\004\046\277" +
    "\001\002\000\062\010\uff93\011\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\050\uff93\052\uff93\053\uff93\054\uff91\055\uff93" +
    "\001\002\000\004\054\274\001\002\000\010\016\uffe1\057" +
    "\uffe1\063\uffe1\001\002\000\032\013\uffcf\014\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\056" +
    "\uffcf\057\uffcf\063\uffcf\001\002\000\004\046\273\001\002" +
    "\000\022\015\120\027\117\046\uffc5\052\131\060\125\061" +
    "\126\062\124\063\071\001\002\000\004\052\263\001\002" +
    "\000\026\013\uffde\014\uffde\017\uffde\020\uffde\022\uffde\024" +
    "\uffde\025\uffde\056\uffde\057\uffde\063\uffde\001\002\000\024" +
    "\013\uffc6\014\uffc6\017\uffc6\020\uffc6\022\uffc6\024\uffc6\025" +
    "\uffc6\056\uffc6\063\uffc6\001\002\000\004\046\260\001\002" +
    "\000\024\013\105\014\067\017\076\020\101\022\077\024" +
    "\070\025\102\056\100\063\071\001\002\000\030\013\uffd4" +
    "\014\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\025" +
    "\uffd4\056\uffd4\057\uffd4\063\uffd4\001\002\000\004\052\116" +
    "\001\002\000\026\013\uffdd\014\uffdd\017\uffdd\020\uffdd\022" +
    "\uffdd\024\uffdd\025\uffdd\056\uffdd\057\uffdd\063\uffdd\001\002" +
    "\000\024\013\105\014\067\017\076\020\101\022\077\024" +
    "\070\025\102\056\100\063\071\001\002\000\030\013\uffd5" +
    "\014\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\025" +
    "\uffd5\056\uffd5\057\uffd5\063\uffd5\001\002\000\030\013\uffd3" +
    "\014\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025" +
    "\uffd3\056\uffd3\057\uffd3\063\uffd3\001\002\000\032\013\uffd5" +
    "\014\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\113\024" +
    "\uffd5\025\uffd5\056\uffd5\057\uffd5\063\uffd5\001\002\000\024" +
    "\013\105\014\067\017\076\020\101\022\077\024\070\025" +
    "\102\056\100\063\071\001\002\000\030\013\uffd2\014\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\056" +
    "\uffd2\057\uffd2\063\uffd2\001\002\000\032\013\uffce\014\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\056\uffce\057\uffce\063\uffce\001\002\000\020\015\120" +
    "\027\117\052\131\060\125\061\126\062\124\063\071\001" +
    "\002\000\016\015\120\052\131\060\125\061\126\062\124" +
    "\063\071\001\002\000\004\063\017\001\002\000\006\050" +
    "\162\053\uffc3\001\002\000\036\026\156\027\157\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\046\uffa3\050\uffa3\053\uffa3\055\uffa3\001\002\000\050" +
    "\011\154\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\046\uff9a\050\uff9a\052\142\053\uff9a\055\uff9a\001" +
    "\002\000\044\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97" +
    "\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\046\uff97\050\uff97\053\uff97\055\uff97\001\002" +
    "\000\044\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\046\uff98\050\uff98\053\uff98\055\uff98\001\002\000" +
    "\044\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\035\uff96" +
    "\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\046\uff96\050\uff96\053\uff96\055\uff96\001\002\000\036" +
    "\026\uffa1\027\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\046\uffa1\050\uffa1\053\uffa1" +
    "\055\uffa1\001\002\000\044\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\046\uff9c\050\uff9c\053\uff9c\055" +
    "\uff9c\001\002\000\020\015\120\027\117\052\131\060\125" +
    "\061\126\062\124\063\071\001\002\000\044\026\uff9f\027" +
    "\uff9f\030\137\031\135\032\134\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\046\uff9f\050" +
    "\uff9f\053\uff9f\055\uff9f\001\002\000\044\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\046\uff9e\050\uff9e" +
    "\053\uff9e\055\uff9e\001\002\000\020\015\uff84\027\uff84\052" +
    "\uff84\060\uff84\061\uff84\062\uff84\063\uff84\001\002\000\020" +
    "\015\uff85\027\uff85\052\uff85\060\uff85\061\uff85\062\uff85\063" +
    "\uff85\001\002\000\020\015\120\027\117\052\131\060\125" +
    "\061\126\062\124\063\071\001\002\000\020\015\uff86\027" +
    "\uff86\052\uff86\060\uff86\061\uff86\062\uff86\063\uff86\001\002" +
    "\000\046\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\046\uff9a\050\uff9a\052\142\053\uff9a\055\uff9a\001" +
    "\002\000\044\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\046\uff9d\050\uff9d\053\uff9d\055\uff9d\001\002" +
    "\000\022\015\120\027\117\052\131\053\uffa8\060\125\061" +
    "\126\062\124\063\071\001\002\000\006\050\uffa5\053\uffa5" +
    "\001\002\000\004\053\uffa7\001\002\000\004\053\146\001" +
    "\002\000\044\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\044\uff99\046\uff99\050\uff99\053\uff99\055\uff99\001\002" +
    "\000\006\050\150\053\uffa6\001\002\000\020\015\120\027" +
    "\117\052\131\060\125\061\126\062\124\063\071\001\002" +
    "\000\006\050\uffa4\053\uffa4\001\002\000\004\053\153\001" +
    "\002\000\044\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\046\uff94\050\uff94\053\uff94\055\uff94\001\002" +
    "\000\004\063\071\001\002\000\032\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\046\uffa2" +
    "\050\uffa2\053\uffa2\055\uffa2\001\002\000\020\015\uff88\027" +
    "\uff88\052\uff88\060\uff88\061\uff88\062\uff88\063\uff88\001\002" +
    "\000\020\015\uff87\027\uff87\052\uff87\060\uff87\061\uff87\062" +
    "\uff87\063\uff87\001\002\000\020\015\120\027\117\052\131" +
    "\060\125\061\126\062\124\063\071\001\002\000\036\026" +
    "\uffa0\027\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\046\uffa0\050\uffa0\053\uffa0\055" +
    "\uffa0\001\002\000\004\060\166\001\002\000\004\053\164" +
    "\001\002\000\004\046\165\001\002\000\032\013\uffc9\014" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\056\uffc9\057\uffc9\063\uffc9\001\002\000\004\053" +
    "\uffc2\001\002\000\004\054\170\001\002\000\020\015\120" +
    "\027\117\052\131\060\125\061\126\062\124\063\071\001" +
    "\002\000\004\055\172\001\002\000\044\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\046\uff95\050\uff95" +
    "\053\uff95\055\uff95\001\002\000\044\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\046\uff9b\050\uff9b\053" +
    "\uff9b\055\uff9b\001\002\000\004\021\175\001\002\000\004" +
    "\052\176\001\002\000\022\015\120\027\117\052\131\053" +
    "\200\060\125\061\126\062\124\063\071\001\002\000\032" +
    "\013\uffc8\014\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\056\uffc8\057\uffc8\063\uffc8\001\002" +
    "\000\004\046\257\001\002\000\012\043\uffb4\044\uffb4\050" +
    "\uffb4\053\uffb4\001\002\000\010\044\255\050\uffb8\053\uffb8" +
    "\001\002\000\026\035\246\036\253\037\247\040\251\041" +
    "\245\042\250\043\uffb2\044\uffb2\050\uffb2\053\uffb2\001\002" +
    "\000\012\043\243\044\uffb5\050\uffb5\053\uffb5\001\002\000" +
    "\010\044\uffb7\050\uffb7\053\uffb7\001\002\000\006\050\207" +
    "\053\210\001\002\000\004\063\071\001\002\000\004\046" +
    "\212\001\002\000\032\013\uffc0\014\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\056\uffc0\057" +
    "\uffc0\063\uffc0\001\002\000\032\013\uffbf\014\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\056" +
    "\uffbf\057\uffbf\063\uffbf\001\002\000\012\033\221\034\222" +
    "\045\224\052\223\001\002\000\032\013\uffbe\014\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\056\uffbe\057\uffbe\063\uffbe\001\002\000\004\053\216\001" +
    "\002\000\004\046\217\001\002\000\032\013\uffbd\014\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\056\uffbd\057\uffbd\063\uffbd\001\002\000\022\003\232" +
    "\015\120\027\117\052\131\060\125\061\126\062\124\063" +
    "\071\001\002\000\006\046\uffaa\053\uffaa\001\002\000\006" +
    "\046\uffa9\053\uffa9\001\002\000\022\015\120\027\117\052" +
    "\131\053\uffa8\060\125\061\126\062\124\063\071\001\002" +
    "\000\022\003\uff8f\015\uff8f\027\uff8f\052\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\001\002\000\004\053\226\001\002" +
    "\000\006\046\uffab\053\uffab\001\002\000\032\013\uffbc\014" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\056\uffbc\057\uffbc\063\uffbc\001\002\000\004\053" +
    "\241\001\002\000\024\010\235\011\154\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\052\142\053\uff9a\001\002\000" +
    "\004\046\233\001\002\000\032\013\uffb9\014\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\056" +
    "\uffb9\057\uffb9\063\uffb9\001\002\000\004\063\071\001\002" +
    "\000\004\063\uff83\001\002\000\004\053\237\001\002\000" +
    "\004\046\240\001\002\000\032\013\uffba\014\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\056" +
    "\uffba\057\uffba\063\uffba\001\002\000\004\046\242\001\002" +
    "\000\032\013\uffbb\014\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\056\uffbb\057\uffbb\063\uffbb" +
    "\001\002\000\020\015\120\027\117\052\131\060\125\061" +
    "\126\062\124\063\071\001\002\000\012\043\uffb3\044\uffb3" +
    "\050\uffb3\053\uffb3\001\002\000\020\015\uff8a\027\uff8a\052" +
    "\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\001\002\000\020" +
    "\015\uff8e\027\uff8e\052\uff8e\060\uff8e\061\uff8e\062\uff8e\063" +
    "\uff8e\001\002\000\020\015\uff8c\027\uff8c\052\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\001\002\000\020\015\uff89\027" +
    "\uff89\052\uff89\060\uff89\061\uff89\062\uff89\063\uff89\001\002" +
    "\000\020\015\uff8b\027\uff8b\052\uff8b\060\uff8b\061\uff8b\062" +
    "\uff8b\063\uff8b\001\002\000\020\015\120\027\117\052\131" +
    "\060\125\061\126\062\124\063\071\001\002\000\020\015" +
    "\uff8d\027\uff8d\052\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d" +
    "\001\002\000\012\043\uffb1\044\uffb1\050\uffb1\053\uffb1\001" +
    "\002\000\020\015\120\027\117\052\131\060\125\061\126" +
    "\062\124\063\071\001\002\000\010\044\uffb6\050\uffb6\053" +
    "\uffb6\001\002\000\032\013\uffc1\014\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\056\uffc1\057" +
    "\uffc1\063\uffc1\001\002\000\032\013\uffcd\014\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\056" +
    "\uffcd\057\uffcd\063\uffcd\001\002\000\026\013\105\014\067" +
    "\017\076\020\101\022\077\024\070\025\102\056\100\057" +
    "\262\063\071\001\002\000\032\013\uffc7\014\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\056" +
    "\uffc7\057\uffc7\063\uffc7\001\002\000\022\003\264\015\120" +
    "\027\117\052\131\060\125\061\126\062\124\063\071\001" +
    "\002\000\004\053\267\001\002\000\004\053\266\001\002" +
    "\000\024\013\uffd1\014\uffd1\017\uffd1\020\uffd1\022\uffd1\024" +
    "\uffd1\025\uffd1\056\uffd1\063\uffd1\001\002\000\024\013\uffd0" +
    "\014\uffd0\017\uffd0\020\uffd0\022\uffd0\024\uffd0\025\uffd0\056" +
    "\uffd0\063\uffd0\001\002\000\004\046\uffc4\001\002\000\004" +
    "\046\272\001\002\000\032\013\uffcb\014\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\056\uffcb" +
    "\057\uffcb\063\uffcb\001\002\000\032\013\uffb0\014\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\056\uffb0\057\uffb0\063\uffb0\001\002\000\020\015\120\027" +
    "\117\052\131\060\125\061\126\062\124\063\071\001\002" +
    "\000\004\055\276\001\002\000\060\010\uff92\011\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\044\uff92\045\uff92\046\uff92\050\uff92\052\uff92\053\uff92" +
    "\055\uff92\001\002\000\032\013\uffcc\014\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\056\uffcc" +
    "\057\uffcc\063\uffcc\001\002\000\004\063\071\001\002\000" +
    "\004\053\302\001\002\000\004\046\303\001\002\000\032" +
    "\013\uffca\014\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\056\uffca\057\uffca\063\uffca\001\002" +
    "\000\022\003\307\015\120\027\117\052\131\060\125\061" +
    "\126\062\124\063\071\001\002\000\004\046\315\001\002" +
    "\000\024\010\235\011\154\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\046\uff9a\052\142\001\002\000\004\046\311" +
    "\001\002\000\032\013\uffaf\014\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\056\uffaf\057\uffaf" +
    "\063\uffaf\001\002\000\032\013\uffac\014\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\056\uffac" +
    "\057\uffac\063\uffac\001\002\000\004\063\071\001\002\000" +
    "\004\046\314\001\002\000\032\013\uffad\014\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\056" +
    "\uffad\057\uffad\063\uffad\001\002\000\032\013\uffae\014\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\056\uffae\057\uffae\063\uffae\001\002\000\010\050\uffe8" +
    "\053\uffe8\054\030\001\002\000\006\050\uffd7\053\uffd7\001" +
    "\002\000\006\003\047\063\017\001\002\000\006\056\uffdc" +
    "\063\uffdc\001\002\000\006\050\uffdb\053\uffdb\001\002\000" +
    "\004\052\uffe6\001\002\000\004\063\327\001\002\000\006" +
    "\046\336\050\335\001\002\000\006\046\ufff4\050\ufff4\001" +
    "\002\000\004\045\330\001\002\000\010\060\332\061\333" +
    "\062\334\001\002\000\006\046\ufff2\050\ufff2\001\002\000" +
    "\006\046\ufff7\050\ufff7\001\002\000\006\046\ufff5\050\ufff5" +
    "\001\002\000\006\046\ufff6\050\ufff6\001\002\000\004\063" +
    "\327\001\002\000\010\012\ufff8\056\ufff8\063\ufff8\001\002" +
    "\000\006\046\ufff3\050\ufff3\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\062\003\001\001\000\002\001\001\000" +
    "\004\061\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\012\004\015\006\012\015\014\067\013\001" +
    "\001\000\004\067\323\001\001\000\004\005\031\001\001" +
    "\000\002\001\001\000\006\016\022\017\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\063\035\064\036\067\033\071\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\026\044\031\050\032\041\033\043\034\045\067" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\054\067\053\001\001\000\004\030\064\001\001\000" +
    "\006\012\057\014\056\001\001\000\002\001\001\000\004" +
    "\013\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\035\105\036\107\037\103\040" +
    "\106\044\102\045\073\065\065\066\071\101\074\001\001" +
    "\000\004\052\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\065\122\066" +
    "\071\072\127\073\132\074\131\075\126\076\121\077\267" +
    "\102\270\001\001\000\002\001\001\000\004\030\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\035\173" +
    "\036\107\037\103\040\106\044\102\045\073\065\065\066" +
    "\071\101\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\035\110\036\111\037\103\040" +
    "\106\044\102\045\073\065\065\066\071\101\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\036\114\037\113\040\106\044\102\045\073\065\065" +
    "\066\071\101\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\065\122\066\071\072\127\073\132\074\131" +
    "\075\126\076\121\077\120\001\001\000\010\065\137\066" +
    "\071\072\172\001\001\000\004\067\166\001\001\000\004" +
    "\041\162\001\001\000\004\054\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\065\122\066" +
    "\071\072\127\073\132\074\131\075\126\076\121\077\151" +
    "\001\001\000\004\055\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\065\137\066\071" +
    "\072\127\073\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\046\144\047\143\065\122" +
    "\066\071\072\127\073\132\074\131\075\126\076\121\077" +
    "\142\001\001\000\004\050\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\065\122\066\071\072\127\073\132\074\131\075\126" +
    "\076\121\077\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\065\154\066\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\065\137\066\071\072\127\073\132\074\131\075\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\065\122\066\071\072\127\073" +
    "\132\074\131\075\126\076\121\077\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\042\176\065\122\066\071" +
    "\072\127\073\132\074\131\075\126\076\121\077\202\103" +
    "\205\104\204\105\201\106\203\107\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\210\001\001\000\012\057\213\065" +
    "\212\066\071\101\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\060\226\065\230\066\071\072\127\073" +
    "\132\074\131\075\126\076\121\077\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\046\224\047\143\065" +
    "\122\066\071\072\127\073\132\074\131\075\126\076\121" +
    "\077\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\065\235\066\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\065\122\066\071\072\127" +
    "\073\132\074\131\075\126\076\121\077\202\107\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\065\122\066\071\072\127\073\132\074\131\075\126" +
    "\076\121\077\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\065\122\066\071\072\127\073\132\074\131" +
    "\075\126\076\121\077\202\104\255\106\203\107\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\035\105\036\107\037\103\040\106\044\102\045" +
    "\073\065\065\066\071\101\074\001\001\000\002\001\001" +
    "\000\034\065\122\066\071\072\127\073\132\074\131\075" +
    "\126\076\121\077\202\103\264\104\204\105\201\106\203" +
    "\107\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\065" +
    "\122\066\071\072\127\073\132\074\131\075\126\076\121" +
    "\077\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\065\300\066\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\065" +
    "\305\066\071\072\127\073\132\074\131\075\126\076\121" +
    "\077\304\100\307\001\001\000\002\001\001\000\004\056" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\065\312\066\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\316" +
    "\001\001\000\002\001\001\000\010\033\043\034\321\067" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\324\010\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	errorDetected = false;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
//    if (s != null && s.value != null)
//        log.info(s.toString() + " " + s.value.toString());
    return s;

    }



    boolean errorDetected;
    Logger log = Logger.getLogger(getClass());

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("Sintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            String tokenValue = (s.value != null) ? s.value.toString() : "<null>";
            msg.append(": neocekivani token '").append(tokenValue).append("'");
            msg.append(" na liniji ").append(s.left)
               .append(", na koloni ").append(s.right);
        } else if (info != null) {
            msg.append(" ").append(info.toString());
        }
        log.error(msg.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Setop ::= UNION 
            {
              Setop RESULT = null;
		 RESULT=new Union(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*Setop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new Mod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Mulop ::= DIVIDE 
            {
              Mulop RESULT = null;
		 RESULT=new Div(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Mulop ::= MULTIPLY 
            {
              Mulop RESULT = null;
		 RESULT=new Mull(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new Minus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new Plus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= LE 
            {
              Relop RESULT = null;
		 RESULT=new Le(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= LT 
            {
              Relop RESULT = null;
		 RESULT=new Lt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= GE 
            {
              Relop RESULT = null;
		 RESULT=new Ge(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= GT 
            {
              Relop RESULT = null;
		 RESULT=new Gt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= NE 
            {
              Relop RESULT = null;
		 RESULT=new Ne(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= EQ 
            {
              Relop RESULT = null;
		 RESULT=new Eq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Assignop ::= ASSIGN 
            {
              Assignop RESULT = null;
		 RESULT=new Assign(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Assignop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Label ::= IDENT 
            {
              Label RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Label(I1); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*Label*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DesignatorIdent ::= IDENT 
            {
              DesignatorIdent RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorIdent(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*DesignatorIdent*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Designator ::= DesignatorIdent LBRACKET Expr RBRACKET 
            {
              Designator RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorIdent name = (DesignatorIdent)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorArr(name, expr); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Designator ::= IDENT 
            {
              Designator RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorVar(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ParenFactor(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Factor RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new NewFactor(T1, E2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= BOOLCONST 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BoolFactor(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= CHARCONST 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharFactor(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= NUMBERCONST 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumConstFactor(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= Designator LPAREN OptionalActPars RPAREN 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OptionalActPars O2 = (OptionalActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorMethFactor(D1, O2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FactorOpt ::= MINUS Factor 
            {
              FactorOpt RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnaryMinusFactor(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*FactorOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FactorOpt ::= Factor 
            {
              FactorOpt RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoUnaryFactor(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*FactorOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FactorList ::= FactorList Mulop FactorOpt 
            {
              FactorList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FactorList F1 = (FactorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M2 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FactorOpt F3 = (FactorOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermMulFactors(F1, M2, F3); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*FactorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FactorList ::= FactorOpt 
            {
              FactorList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FactorOpt F1 = (FactorOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermFactor(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*FactorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Term ::= FactorList 
            {
              Term RESULT = null;
		int factorListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FactorList factorList = (FactorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Term(factorList); RESULT.setLine(factorListleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TermList ::= TermList Addop Term 
            {
              TermList RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		TermList T1 = (TermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A2 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T3 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AddTerms(T1, A2, T3); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*TermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TermList ::= Term 
            {
              TermList RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AddTerm(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*TermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Designator MAP Designator 
            {
              Expr RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D2 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MapExpretion(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= TermList 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		TermList T1 = (TermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Expretion(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ActParsList ::= ActParsList COMMA Expr 
            {
              ActParsList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActParsList A1 = (ActParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParams(A1, E2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*ActParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ActParsList ::= 
            {
              ActParsList RESULT = null;
		 RESULT=new NoActParams(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*ActParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ActPars ::= Expr ActParsList 
            {
              ActPars RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActParsList A2 = (ActParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActPars(E1, A2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OptionalActPars ::= ActPars 
            {
              OptionalActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FuncPars(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*OptionalActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OptionalActPars ::= 
            {
              OptionalActPars RESULT = null;
		 RESULT=new NoFuncPars(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*OptionalActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DesignatorOpt ::= Designator DEC 
            {
              DesignatorOpt RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Dec(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*DesignatorOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DesignatorOpt ::= Designator INC 
            {
              DesignatorOpt RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Inc(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*DesignatorOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DesignatorOpt ::= Designator LPAREN OptionalActPars RPAREN 
            {
              DesignatorOpt RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OptionalActPars O2 = (OptionalActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FunctionCall(D1, O2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*DesignatorOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DesignatorOrExpr ::= error SEMI 
            {
              DesignatorOrExpr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                            parser.report_error("Izvrsen oporavak greska pri konstrukcija iskaza dodele ; u liniji " + lleft, null);
                       RESULT=new DesignatorStmtError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*DesignatorOrExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorOrExpr ::= Designator Setop Designator SEMI 
            {
              DesignatorOrExpr RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Setop S2 = (Setop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int D3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D3 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new UnionStmt(D1, S2, D3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*DesignatorOrExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorOrExpr ::= Expr SEMI 
            {
              DesignatorOrExpr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*DesignatorOrExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorStatement ::= Designator Assignop DesignatorOrExpr 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Assignop A2 = (Assignop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorOrExpr D3 = (DesignatorOrExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Assignement(D1, A2, D3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorStatement ::= DesignatorOpt SEMI 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorOpt D1 = (DesignatorOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int exprLleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprLright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr exprL = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int epxrRleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int epxrRright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr epxrR = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Relops(exprL, R1, epxrR); RESULT.setLine(exprLleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoRelops(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CondFactList ::= CondFactList AND CondFact 
            {
              CondFactList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondFactList C1 = (CondFactList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AndConditions(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*CondFactList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CondFactList ::= CondFact 
            {
              CondFactList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionFacts(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*CondFactList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CondTerm ::= CondFactList 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFactList C1 = (CondFactList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionTerm(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CondTermList ::= CondTermList OR CondTerm 
            {
              CondTermList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTermList C1 = (CondTermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OrConditions(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*CondTermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CondTermList ::= CondTerm 
            {
              CondTermList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionTerms(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*CondTermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condition ::= CondTermList 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTermList C1 = (CondTermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DesignatorOrExprWhile ::= error SEMI 
            {
              DesignatorOrExprWhile RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                                parser.report_error("Izvrsen oporavak greska pri konstrukcija iskaza dodele ; u liniji " + lleft, null);
                           RESULT=new DesignatorStmtErrorDoWhile(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorOrExprWhile*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DesignatorOrExprWhile ::= Designator Setop Designator RPAREN SEMI 
            {
              DesignatorOrExprWhile RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Setop S2 = (Setop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int D3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D3 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new UnionStmtDoWhile(D1, S2, D3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorOrExprWhile*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DesignatorOrExprWhile ::= Expr RPAREN SEMI 
            {
              DesignatorOrExprWhile RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new DesignatorExprDoWhile(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorOrExprWhile*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DesignatorStatementWhile ::= Designator Assignop DesignatorOrExprWhile 
            {
              DesignatorStatementWhile RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Assignop A2 = (Assignop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorOrExprWhile D3 = (DesignatorOrExprWhile)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AssignementDoWhile(D1, A2, D3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*DesignatorStatementWhile*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignatorStatementWhile ::= DesignatorOpt RPAREN SEMI 
            {
              DesignatorStatementWhile RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorOpt D1 = (DesignatorOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new DesignatorStmtDoWhile(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*DesignatorStatementWhile*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OptionalDesignatorStatement ::= COMMA DesignatorStatementWhile 
            {
              OptionalDesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatementWhile D1 = (DesignatorStatementWhile)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DoWhileDesignatorStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*OptionalDesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OptionalDesignatorStatement ::= RPAREN SEMI 
            {
              OptionalDesignatorStatement RESULT = null;
		 RESULT=new NoDoWhileDesignatorStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*OptionalDesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OptionalCondition ::= Condition OptionalDesignatorStatement 
            {
              OptionalCondition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OptionalDesignatorStatement O2 = (OptionalDesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DoWhileCond(C1, O2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*OptionalCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OptionalCondition ::= RPAREN SEMI 
            {
              OptionalCondition RESULT = null;
		 RESULT=new NoDoWhileCond(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*OptionalCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OptionalNumConst ::= COMMA NUMBERCONST 
            {
              OptionalNumConst RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new PrintNumConst(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*OptionalNumConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OptionalNumConst ::= 
            {
              OptionalNumConst RESULT = null;
		 RESULT=new NoPrintNumConst(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*OptionalNumConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OptionalExpr ::= Expr 
            {
              OptionalExpr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*OptionalExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OptionalExpr ::= 
            {
              OptionalExpr RESULT = null;
		 RESULT=new NoReturnExpr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*OptionalExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BeginDoWhile ::= DO 
            {
              BeginDoWhile RESULT = null;
		 RESULT=new BeginDoWhile(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*BeginDoWhile*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Matched ::= LBRACE StatementList RBRACE 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedStatements(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Matched ::= BeginDoWhile Statement WHILE LPAREN OptionalCondition 
            {
              Matched RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		BeginDoWhile B1 = (BeginDoWhile)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int O3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int O3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OptionalCondition O3 = (OptionalCondition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DoWhile(B1, S2, O3); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Matched ::= PRINT LPAREN Expr OptionalNumConst RPAREN SEMI 
            {
              Matched RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		OptionalNumConst O2 = (OptionalNumConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Print(E1, O2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Read(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Matched ::= RETURN OptionalExpr SEMI 
            {
              Matched RESULT = null;
		int O1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OptionalExpr O1 = (OptionalExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Return(O1); RESULT.setLine(O1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Matched ::= CONTINUE SEMI 
            {
              Matched RESULT = null;
		 RESULT=new Continue(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matched ::= BREAK SEMI 
            {
              Matched RESULT = null;
		 RESULT=new Break(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matched ::= IfConstruction Matched ELSE Matched 
            {
              Matched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		IfConstruction I1 = (IfConstruction)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M3 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedIf(I1, M2, M3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matched ::= DesignatorStatement 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStmtt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IfConstruction ::= IF LPAREN error RPAREN 
            {
              IfConstruction RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                        parser.report_error("Izvrsen oporavak greska pri logickom izraz unutar if konstrukcije do ) u liniji " + lleft, null);
                   RESULT=new IfError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*IfConstruction*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IfConstruction ::= IF LPAREN Condition RPAREN 
            {
              IfConstruction RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new If(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*IfConstruction*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Unmatched ::= IfConstruction Matched ELSE Unmatched 
            {
              Unmatched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		IfConstruction I1 = (IfConstruction)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int U3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U3 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIfElse(I1, M2, U3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Unmatched ::= IfConstruction Statement 
            {
              Unmatched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		IfConstruction I1 = (IfConstruction)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIf(I1, S2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= Unmatched 
            {
              Statement RESULT = null;
		int U1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U1 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= Matched 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M1 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(type); RESULT.setLine(typeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormPar ::= Type IDENT ArrayOpt 
            {
              FormPar RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int formNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int formNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String formName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ArrayOpt A1 = (ArrayOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormPar(t, formName, A1); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*FormPar*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormParItem ::= error 
            {
              FormParItem RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                    parser.report_error("Izvrsen oporavak greska pri deklaraciji formalnog parametra funkcije do , ili ) u liniji " + lleft, null);
               RESULT=new FormParItemError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*FormParItem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormParItem ::= FormPar 
            {
              FormParItem RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPar F1 = (FormPar)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParItemVar(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*FormParItem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormParsList ::= FormParItem 
            {
              FormParsList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParItem F1 = (FormParItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsListEnd(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*FormParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormParsList ::= FormParsList COMMA FormParItem 
            {
              FormParsList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormParsList F1 = (FormParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParItem F2 = (FormParItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParamsList(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*FormParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormPars ::= FormParsList RPAREN 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FormParsList F1 = (FormParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FormParams(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Statements(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new NoStatements(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarDeclList ::= VarDeclList VarDecl 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VarDeclList ::= 
            {
              VarDeclList RESULT = null;
		 RESULT=new NoVarDeclarations(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDecl ::= MethodSignature LPAREN FormParsOpt VarDeclList LBRACE StatementList RBRACE 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		MethodSignature M1 = (MethodSignature)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		FormParsOpt F2 = (FormParsOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclList V3 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FormParsOpt ::= FormPars 
            {
              FormParsOpt RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Pars(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*FormParsOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FormParsOpt ::= RPAREN 
            {
              FormParsOpt RESULT = null;
		 RESULT=new NoPars(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*FormParsOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodType ::= VOID 
            {
              MethodType RESULT = null;
		 RESULT=new ReturnVoid(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*MethodType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodType ::= Type 
            {
              MethodType RESULT = null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ReturnType(returnType); RESULT.setLine(returnTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*MethodType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodSignature ::= MethodType IDENT 
            {
              MethodSignature RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodType M1 = (MethodType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodSignature(M1, methodName); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*MethodSignature*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ArrayOpt ::= LBRACKET RBRACKET 
            {
              ArrayOpt RESULT = null;
		 RESULT=new Array(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*ArrayOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ArrayOpt ::= 
            {
              ArrayOpt RESULT = null;
		 RESULT=new NoArray(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*ArrayOpt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarItem ::= IDENT ArrayOpt 
            {
              VarItem RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ArrayOpt A1 = (ArrayOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarItem(varName, A1); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*VarItem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarList ::= VarItem 
            {
              VarList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarItem V1 = (VarItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarListEnd(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarList ::= VarList COMMA VarItem 
            {
              VarList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarList V1 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarItem V2 = (VarItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarListMore(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type VarList SEMI 
            {
              VarDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarList V2 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclaration(T1, V2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarItem ::= error 
            {
              GlobalVarItem RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                parser.report_error("Izvrsen oporavak greska pri definiciji globalne promenljive do , ili ; u liniji " + lleft, null);
             RESULT=new GlobalVarError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*GlobalVarItem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarItem ::= IDENT ArrayOpt 
            {
              GlobalVarItem RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ArrayOpt A1 = (ArrayOpt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new GlobalVar(varName, A1); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*GlobalVarItem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarList ::= GlobalVarItem 
            {
              GlobalVarList RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		GlobalVarItem G1 = (GlobalVarItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new GlobalVarListEnd(G1); RESULT.setLine(G1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*GlobalVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarList ::= GlobalVarList COMMA GlobalVarItem 
            {
              GlobalVarList RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		GlobalVarList G1 = (GlobalVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int G2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int G2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		GlobalVarItem G2 = (GlobalVarItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new GLobalVarListMore(G1, G2); RESULT.setLine(G1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*GlobalVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GlobalVarDecl ::= Type GlobalVarList SEMI 
            {
              GlobalVarDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int G2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int G2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		GlobalVarList G2 = (GlobalVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new GlobalVarDecl(T1, G2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*GlobalVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstItem ::= IDENT ASSIGN Consts 
            {
              ConstItem RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int constValright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Consts constVal = (Consts)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstItem(constName, constVal); RESULT.setLine(constNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ConstItem*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDeclList ::= ConstDeclList COMMA ConstItem 
            {
              ConstDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstItem C2 = (ConstItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclarations(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDeclList ::= ConstItem 
            {
              ConstDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstItem C1 = (ConstItem)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Consts ::= BOOLCONST 
            {
              Consts RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BoolConst(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*Consts*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Consts ::= CHARCONST 
            {
              Consts RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharConst(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*Consts*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Consts ::= NUMBERCONST 
            {
              Consts RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumConst(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*Consts*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstDeclList SEMI 
            {
              ConstDecl RESULT = null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type constType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDecl(constType, C1); RESULT.setLine(constTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new NoMethodDeclarations(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DecType ::= GlobalVarDecl 
            {
              DecType RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		GlobalVarDecl G1 = (GlobalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclType(G1); RESULT.setLine(G1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DecType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DecType ::= ConstDecl 
            {
              DecType RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclType(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DecType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= DeclList DecType 
            {
              DeclList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DecType D2 = (DecType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgDeclList(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= 
            {
              DeclList RESULT = null;
		 RESULT=new NoProgDeclList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              ProgramName RESULT = null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramName(progName); RESULT.setLine(progNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*ProgramName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName DeclList LBRACE MethodDeclList RBRACE 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgramName p = (ProgramName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M2 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

